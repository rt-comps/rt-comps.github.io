const[compName]=rtlib.parseURL(import.meta.url);console.warn(`${customElements.get(compName)?"Component already exists":"Good to continue"}`);customElements.define(compName,class extends rtBC.RTBaseClass{#_sR;#_form;constructor(){super();this.#_sR=this.attachShadow({mode:"open"});this.#_sR.append(this.$getTemplate());const attributes=this.attributes;this.#_sR.querySelector("#container").style.width=attributes["form-width"]?attributes["form-width"].value:"1000px";const cartWidth=attributes["cart-width"]?attributes["cart-width"].value:"350px";const _cart=this.#_sR.querySelector("#cart");_cart.style.flex=`0 0 ${cartWidth}`;_cart.style.maxWidth=cartWidth;this.id="eventBus";this.addEventListener("updatemenu",e=>this.updateItemData(e));this.addEventListener("orderaccept",()=>this.accepted());this.#_sR.querySelector("#menu-container").addEventListener("updatecount",e=>this.displayDetailButton(e));this.#_sR.querySelector("#cart").addEventListener("cartmod",e=>this.modifyCart(e));this.#_sR.querySelector("#add-but").addEventListener("click",()=>this.addToCart());this.#_sR.querySelector("#further-but").addEventListener("click",()=>this.continueOrder());this.#_sR.querySelector("#recover-but").addEventListener("click",()=>this.recoverOrder());this.#_sR.querySelector("#sub-but").addEventListener("click",()=>this.dispatchOrder())}connectedCallback(){this.initialiseMenu();this.style.display="inline-block"}initialiseMenu(){const imgPath=this.querySelector("form-config span#imgpath").innerHTML;const nodes=[...this.querySelectorAll("item-data")];this.append(...nodes.map(element=>{let elementAttrs={id:`mi-${element.id}`,slot:"menu-items",style:"justify-self: center"};let imgNode=element.querySelector("img");if(imgNode)elementAttrs.bgimg=`${imgPath}/${imgNode.getAttribute("file")}`;return this.$createElement({tag:"menu-item",innerHTML:`${element.querySelector("item-title").innerHTML}`,attrs:elementAttrs})}));if(localStorage.getItem("currentOrder"))this.updateCart();this.displayCartButtons();const srcNode=this.querySelector('div[slot="user-details"]');this.#_form=this.#_sR.querySelector("form#details-form");this.#_form.append(...srcNode.children)}updateItemData(e){let newData;if(e){e.stopPropagation();newData=e.detail.id}this.querySelectorAll("item-data").forEach(element=>{element.removeAttribute("slot")});const _details=this.#_sR.querySelector("#details-container");if(newData){this.querySelector(`item-data#${newData}`).setAttribute("slot","active-data");_details.style.visibility="visible";this.displayDetailButton()}else{_details.style.visibility=""}}displayDetailButton(e){if(e)e.stopPropagation();const buttonNode=this.shadowRoot.querySelector("#add-but");if(this.querySelectorAll("item-data[slot] item-line[count]").length===0){buttonNode.classList.remove("buttonadd");buttonNode.innerHTML="Annuleren"}else{buttonNode.classList.add("buttonadd");buttonNode.innerHTML="Toevoegen"}}displayCartButtons(fiddle=false){const buttons={order:this.#_sR.getElementById("sub-but"),further:this.#_sR.getElementById("further-but"),last:this.#_sR.getElementById("recover-but")};for(const button in buttons)if(buttons.hasOwnProperty(button))buttons[button].style.display="none";let newBut;switch(true){case(this.querySelectorAll('line-item[slot="cart"][count]').length===0||fiddle)&&localStorage.getItem("lastOrder")!==null:newBut="last";break;case this.#_sR.querySelector("#form-container").style.visibility==="visible":newBut="order";break;case this.querySelectorAll('line-item[slot="cart"][count]').length!==0:newBut="further";break;default:newBut=null}if(newBut)buttons[newBut].style.display=""}updateCart(){const currentCartContents=[...this.querySelectorAll("line-item")];currentCartContents.forEach(node=>node.remove());const localData=JSON.parse(localStorage.getItem("currentOrder"));let orderTotal=0;if(localData){this.append(...localData.map(lineData=>{const itemLine=this.querySelector(`item-line[prodid="${lineData.prodID}"]`);const itemVar=itemLine.parentElement;const itemName=itemVar.parentElement;const itemText=`${itemName.querySelector("item-title").innerText}<br/>${itemVar.getAttribute("value")} ${itemVar.getAttribute("desc")}<br/>${itemLine.innerText}`;const unitPrice=itemLine.getAttribute("prijs");orderTotal+=parseInt(unitPrice)*lineData.count;return this.$createElement({tag:"line-item",innerHTML:itemText,attrs:{slot:"cart",prodid:lineData.prodID,count:lineData.count,unit:unitPrice}})}))}this.#_sR.querySelector("#total").innerHTML=this.$euro(orderTotal/100);this.displayCartButtons()}updateCurOrderStor(itemObj){if(itemObj.action){const currentItems=JSON.parse(localStorage.getItem("currentOrder"))||[];let notFound=true;if(currentItems){const maxVal=currentItems.length;for(let i=0;i<maxVal;i++){if(itemObj.prodID===currentItems[i].prodID){if(itemObj.count)currentItems[i].count+=itemObj.count;if(itemObj.action==="remove"||currentItems[i].count===0)currentItems.splice(i,1);notFound=false;break}}}if(notFound){delete itemObj.action;currentItems.push(itemObj)}if(currentItems.length>0)localStorage.setItem("currentOrder",JSON.stringify(currentItems));else localStorage.removeItem("currentOrder");this.updateCart()}}modifyCart(e){e.stopPropagation();this.updateCurOrderStor(e.detail)}addToCart(){const activeItemLines=[...this.querySelectorAll('[slot="active-data"] item-line[count]')];if(activeItemLines)activeItemLines.forEach(node=>{this.updateCurOrderStor({prodID:node.getAttribute("prodid"),count:parseInt(node.getAttribute("count")),action:"update"});node.updateCount({detail:{change:0-parseInt(node.getAttribute("count"))}})});this.updateItemData()}continueOrder(){const details=localStorage.getItem("userDeets");if(details){this.#_form.querySelector("#savefields").checked=true;const deetsObj=JSON.parse(details);for(const[key,value]of Object.entries(deetsObj)){this.#_form.querySelector(`[name=${key}]`).value=value}}this.#_sR.querySelector("#form-container").style.visibility="visible";this.displayCartButtons()}recoverOrder(){if(localStorage.getItem("lastOrder"))localStorage.setItem("currentOrder",localStorage.getItem("lastOrder"));this.updateCart()}dispatchOrder(){if(this.#_form){let firstFail=false;const nodes=this.#_form.querySelectorAll("form-field, pickup-locations, date-picker");for(const el of nodes){if(!el.checkValidity()){if(!firstFail){el.focus();firstFail=true}}}if(!firstFail){const formValues=new FormData(this.#_form);this.$dispatch({name:"neworder",detail:{person:Object.fromEntries(formValues.entries()),order:JSON.parse(localStorage.getItem("currentOrder"))}})}}else console.warn("Form submission failed: form not found")}accepted(){this.#_sR.querySelector("#form-container").style.visibility="";localStorage.setItem("lastOrder",localStorage.getItem("currentOrder"));localStorage.removeItem("currentOrder");this.updateCart();this.displayCartButtons();const saveFields=this.#_sR.querySelector("#savefields");if(saveFields&&saveFields.checked){const fields=[...this.#_sR.querySelectorAll(`#details-form form-field,textarea`)];const output=fields.reduce((acc,el)=>({...acc,[el.name]:el.value}),{});localStorage.setItem("userDeets",JSON.stringify(output))}else localStorage.removeItem("userDeets");this.#_form.reset();console.log("Form Submitted!")}});
